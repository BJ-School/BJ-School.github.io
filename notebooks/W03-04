{
  "nbformat": 4,
  "nbformat_minor": 0,
  "metadata": {
    "colab": {
      "name": "starter_bank.ipynb",
      "provenance": []
    },
    "kernelspec": {
      "name": "python3",
      "display_name": "Python 3"
    }
  },
  "cells": [
    {
      "cell_type": "code",
      "source": [
        "import pandas as pd\n",
        "import matplotlib.pyplot as plt\n",
        "import seaborn as sns\n",
        "import textwrap"
      ],
      "metadata": {
        "id": "IWMgKRIACfzZ"
      },
      "execution_count": 169,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "# import seaborn as sns\n",
        "# import matplotlib.pyplot as plt\n",
        "def graphCategoricalVsTarget(theData, targetValue, limit=None):\n",
        "    categoricalData = theData.select_dtypes(include='object').columns\n",
        "    if isinstance(limit, int) and limit > 0:\n",
        "        categoricalData = categoricalData[:limit]\n",
        "\n",
        "    for col in categoricalData:\n",
        "        plt.figure(figsize=(5, 4))\n",
        "        sns.barplot(x=targetValue, y=col, data=theData)\n",
        "        plt.title(f\"Our Target vs {col}\")\n",
        "        plt.show()\n",
        "\n",
        "# import pandas as pd\n",
        "def reportDatasetSummary(theData, sortBy=\"columnName\"):\n",
        "    summary = {\n",
        "        'columnName': [],\n",
        "        'numberOfNAValues': [],\n",
        "        'numberOfDistinctValues': [],\n",
        "        'columnType': [],\n",
        "        'minValue': [],\n",
        "        'maxValue': []\n",
        "    }\n",
        "\n",
        "    for column in theData.columns:\n",
        "        summary['columnName'].append(column)\n",
        "        summary['numberOfNAValues'].append(theData[column].isna().sum())\n",
        "        summary['numberOfDistinctValues'].append(theData[column].nunique())\n",
        "        summary['columnType'].append(theData[column].dtype)\n",
        "\n",
        "        if pd.api.types.is_numeric_dtype(theData[column]):\n",
        "            summary['minValue'].append(theData[column].min())\n",
        "            summary['maxValue'].append(theData[column].max())\n",
        "        else:\n",
        "            summary['minValue'].append(None)\n",
        "            summary['maxValue'].append(None)\n",
        "\n",
        "    summary_df = pd.DataFrame(summary)\n",
        "\n",
        "    if sortBy:\n",
        "        if pd.api.types.is_numeric_dtype(summary_df[sortBy]):\n",
        "            summary_df = summary_df.sort_values(by=sortBy, ascending=False)\n",
        "        else:\n",
        "            summary_df = summary_df.sort_values(by=sortBy, ascending=True)\n",
        "\n",
        "    return summary_df.head(100)\n",
        "\n",
        "# import pandas as pd\n",
        "# import textwrap\n",
        "def reportDistinctValues(dataFrame, rankBy=\"columnName\"):\n",
        "    distinctValues = {}\n",
        "    for column in dataFrame.columns:\n",
        "        valueCounts = dataFrame[column].value_counts()\n",
        "        columnType = dataFrame[column].dtype\n",
        "\n",
        "        if pd.api.types.is_numeric_dtype(dataFrame[column]):\n",
        "            valueCounts = valueCounts.sort_index()\n",
        "\n",
        "        distinctValues[column] = [f\"{value} ({count})\" for value, count in valueCounts.items()]\n",
        "\n",
        "    # Sort the results based on the rankBy variable\n",
        "    sortedColumns = sorted(distinctValues.keys(), key=lambda col: dataFrame[col].dtype if rankBy == \"columnType\" else col)\n",
        "\n",
        "    for column in sortedColumns:\n",
        "        columnType = dataFrame[column].dtype\n",
        "        wrappedValues = textwrap.fill(\", \".join(distinctValues[column]), width=200, break_long_words=False, break_on_hyphens=False)\n",
        "        print(f\"{column} ({columnType}):\\n\" + wrappedValues + \"\\n\")\n",
        "\n",
        "# import pandas as pd\n",
        "def reportNaValue(theData):\n",
        "    naCounts = theData.isna().sum()\n",
        "    naCountsSorted = naCounts[naCounts > 0].sort_values(ascending=False)\n",
        "    naCountsSorted.index.name = 'Field'\n",
        "    naCountsSorted.name = 'Qty'\n",
        "    total_records = len(theData)\n",
        "    #print(f\"Data Set Report - NA Values ({total_records})\")\n",
        "    return naCountsSorted.head(100)"
      ],
      "metadata": {
        "id": "gx4Vq2U-CHvR"
      },
      "execution_count": 214,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "theOriginalData = pd.read_csv('https://raw.githubusercontent.com/byui-cse/cse450-course/master/data/bank.csv')\n",
        "# theOriginalData.head(5)"
      ],
      "metadata": {
        "id": "JlYrV7r-cO67",
        "outputId": "6b730f75-2b4c-45b0-c57b-da263542361f",
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 206
        }
      },
      "execution_count": 160,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "   age        job  marital    education  default housing loan    contact  \\\n",
              "0   56  housemaid  married     basic.4y       no      no   no  telephone   \n",
              "1   57   services  married  high.school  unknown      no   no  telephone   \n",
              "2   37   services  married  high.school       no     yes   no  telephone   \n",
              "3   40     admin.  married     basic.6y       no      no   no  telephone   \n",
              "4   56   services  married  high.school       no      no  yes  telephone   \n",
              "\n",
              "  month day_of_week  campaign  pdays  previous     poutcome  emp.var.rate  \\\n",
              "0   may         mon         1    999         0  nonexistent           1.1   \n",
              "1   may         mon         1    999         0  nonexistent           1.1   \n",
              "2   may         mon         1    999         0  nonexistent           1.1   \n",
              "3   may         mon         1    999         0  nonexistent           1.1   \n",
              "4   may         mon         1    999         0  nonexistent           1.1   \n",
              "\n",
              "   cons.price.idx  cons.conf.idx  euribor3m  nr.employed   y  \n",
              "0          93.994          -36.4      4.857       5191.0  no  \n",
              "1          93.994          -36.4      4.857       5191.0  no  \n",
              "2          93.994          -36.4      4.857       5191.0  no  \n",
              "3          93.994          -36.4      4.857       5191.0  no  \n",
              "4          93.994          -36.4      4.857       5191.0  no  "
            ],
            "text/html": [
              "\n",
              "  <div id=\"df-b7bb24d3-ff55-4bb1-aef8-cfe552e86c10\" class=\"colab-df-container\">\n",
              "    <div>\n",
              "<style scoped>\n",
              "    .dataframe tbody tr th:only-of-type {\n",
              "        vertical-align: middle;\n",
              "    }\n",
              "\n",
              "    .dataframe tbody tr th {\n",
              "        vertical-align: top;\n",
              "    }\n",
              "\n",
              "    .dataframe thead th {\n",
              "        text-align: right;\n",
              "    }\n",
              "</style>\n",
              "<table border=\"1\" class=\"dataframe\">\n",
              "  <thead>\n",
              "    <tr style=\"text-align: right;\">\n",
              "      <th></th>\n",
              "      <th>age</th>\n",
              "      <th>job</th>\n",
              "      <th>marital</th>\n",
              "      <th>education</th>\n",
              "      <th>default</th>\n",
              "      <th>housing</th>\n",
              "      <th>loan</th>\n",
              "      <th>contact</th>\n",
              "      <th>month</th>\n",
              "      <th>day_of_week</th>\n",
              "      <th>campaign</th>\n",
              "      <th>pdays</th>\n",
              "      <th>previous</th>\n",
              "      <th>poutcome</th>\n",
              "      <th>emp.var.rate</th>\n",
              "      <th>cons.price.idx</th>\n",
              "      <th>cons.conf.idx</th>\n",
              "      <th>euribor3m</th>\n",
              "      <th>nr.employed</th>\n",
              "      <th>y</th>\n",
              "    </tr>\n",
              "  </thead>\n",
              "  <tbody>\n",
              "    <tr>\n",
              "      <th>0</th>\n",
              "      <td>56</td>\n",
              "      <td>housemaid</td>\n",
              "      <td>married</td>\n",
              "      <td>basic.4y</td>\n",
              "      <td>no</td>\n",
              "      <td>no</td>\n",
              "      <td>no</td>\n",
              "      <td>telephone</td>\n",
              "      <td>may</td>\n",
              "      <td>mon</td>\n",
              "      <td>1</td>\n",
              "      <td>999</td>\n",
              "      <td>0</td>\n",
              "      <td>nonexistent</td>\n",
              "      <td>1.1</td>\n",
              "      <td>93.994</td>\n",
              "      <td>-36.4</td>\n",
              "      <td>4.857</td>\n",
              "      <td>5191.0</td>\n",
              "      <td>no</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>1</th>\n",
              "      <td>57</td>\n",
              "      <td>services</td>\n",
              "      <td>married</td>\n",
              "      <td>high.school</td>\n",
              "      <td>unknown</td>\n",
              "      <td>no</td>\n",
              "      <td>no</td>\n",
              "      <td>telephone</td>\n",
              "      <td>may</td>\n",
              "      <td>mon</td>\n",
              "      <td>1</td>\n",
              "      <td>999</td>\n",
              "      <td>0</td>\n",
              "      <td>nonexistent</td>\n",
              "      <td>1.1</td>\n",
              "      <td>93.994</td>\n",
              "      <td>-36.4</td>\n",
              "      <td>4.857</td>\n",
              "      <td>5191.0</td>\n",
              "      <td>no</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>2</th>\n",
              "      <td>37</td>\n",
              "      <td>services</td>\n",
              "      <td>married</td>\n",
              "      <td>high.school</td>\n",
              "      <td>no</td>\n",
              "      <td>yes</td>\n",
              "      <td>no</td>\n",
              "      <td>telephone</td>\n",
              "      <td>may</td>\n",
              "      <td>mon</td>\n",
              "      <td>1</td>\n",
              "      <td>999</td>\n",
              "      <td>0</td>\n",
              "      <td>nonexistent</td>\n",
              "      <td>1.1</td>\n",
              "      <td>93.994</td>\n",
              "      <td>-36.4</td>\n",
              "      <td>4.857</td>\n",
              "      <td>5191.0</td>\n",
              "      <td>no</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>3</th>\n",
              "      <td>40</td>\n",
              "      <td>admin.</td>\n",
              "      <td>married</td>\n",
              "      <td>basic.6y</td>\n",
              "      <td>no</td>\n",
              "      <td>no</td>\n",
              "      <td>no</td>\n",
              "      <td>telephone</td>\n",
              "      <td>may</td>\n",
              "      <td>mon</td>\n",
              "      <td>1</td>\n",
              "      <td>999</td>\n",
              "      <td>0</td>\n",
              "      <td>nonexistent</td>\n",
              "      <td>1.1</td>\n",
              "      <td>93.994</td>\n",
              "      <td>-36.4</td>\n",
              "      <td>4.857</td>\n",
              "      <td>5191.0</td>\n",
              "      <td>no</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>4</th>\n",
              "      <td>56</td>\n",
              "      <td>services</td>\n",
              "      <td>married</td>\n",
              "      <td>high.school</td>\n",
              "      <td>no</td>\n",
              "      <td>no</td>\n",
              "      <td>yes</td>\n",
              "      <td>telephone</td>\n",
              "      <td>may</td>\n",
              "      <td>mon</td>\n",
              "      <td>1</td>\n",
              "      <td>999</td>\n",
              "      <td>0</td>\n",
              "      <td>nonexistent</td>\n",
              "      <td>1.1</td>\n",
              "      <td>93.994</td>\n",
              "      <td>-36.4</td>\n",
              "      <td>4.857</td>\n",
              "      <td>5191.0</td>\n",
              "      <td>no</td>\n",
              "    </tr>\n",
              "  </tbody>\n",
              "</table>\n",
              "</div>\n",
              "    <div class=\"colab-df-buttons\">\n",
              "\n",
              "  <div class=\"colab-df-container\">\n",
              "    <button class=\"colab-df-convert\" onclick=\"convertToInteractive('df-b7bb24d3-ff55-4bb1-aef8-cfe552e86c10')\"\n",
              "            title=\"Convert this dataframe to an interactive table.\"\n",
              "            style=\"display:none;\">\n",
              "\n",
              "  <svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\" viewBox=\"0 -960 960 960\">\n",
              "    <path d=\"M120-120v-720h720v720H120Zm60-500h600v-160H180v160Zm220 220h160v-160H400v160Zm0 220h160v-160H400v160ZM180-400h160v-160H180v160Zm440 0h160v-160H620v160ZM180-180h160v-160H180v160Zm440 0h160v-160H620v160Z\"/>\n",
              "  </svg>\n",
              "    </button>\n",
              "\n",
              "  <style>\n",
              "    .colab-df-container {\n",
              "      display:flex;\n",
              "      gap: 12px;\n",
              "    }\n",
              "\n",
              "    .colab-df-convert {\n",
              "      background-color: #E8F0FE;\n",
              "      border: none;\n",
              "      border-radius: 50%;\n",
              "      cursor: pointer;\n",
              "      display: none;\n",
              "      fill: #1967D2;\n",
              "      height: 32px;\n",
              "      padding: 0 0 0 0;\n",
              "      width: 32px;\n",
              "    }\n",
              "\n",
              "    .colab-df-convert:hover {\n",
              "      background-color: #E2EBFA;\n",
              "      box-shadow: 0px 1px 2px rgba(60, 64, 67, 0.3), 0px 1px 3px 1px rgba(60, 64, 67, 0.15);\n",
              "      fill: #174EA6;\n",
              "    }\n",
              "\n",
              "    .colab-df-buttons div {\n",
              "      margin-bottom: 4px;\n",
              "    }\n",
              "\n",
              "    [theme=dark] .colab-df-convert {\n",
              "      background-color: #3B4455;\n",
              "      fill: #D2E3FC;\n",
              "    }\n",
              "\n",
              "    [theme=dark] .colab-df-convert:hover {\n",
              "      background-color: #434B5C;\n",
              "      box-shadow: 0px 1px 3px 1px rgba(0, 0, 0, 0.15);\n",
              "      filter: drop-shadow(0px 1px 2px rgba(0, 0, 0, 0.3));\n",
              "      fill: #FFFFFF;\n",
              "    }\n",
              "  </style>\n",
              "\n",
              "    <script>\n",
              "      const buttonEl =\n",
              "        document.querySelector('#df-b7bb24d3-ff55-4bb1-aef8-cfe552e86c10 button.colab-df-convert');\n",
              "      buttonEl.style.display =\n",
              "        google.colab.kernel.accessAllowed ? 'block' : 'none';\n",
              "\n",
              "      async function convertToInteractive(key) {\n",
              "        const element = document.querySelector('#df-b7bb24d3-ff55-4bb1-aef8-cfe552e86c10');\n",
              "        const dataTable =\n",
              "          await google.colab.kernel.invokeFunction('convertToInteractive',\n",
              "                                                    [key], {});\n",
              "        if (!dataTable) return;\n",
              "\n",
              "        const docLinkHtml = 'Like what you see? Visit the ' +\n",
              "          '<a target=\"_blank\" href=https://colab.research.google.com/notebooks/data_table.ipynb>data table notebook</a>'\n",
              "          + ' to learn more about interactive tables.';\n",
              "        element.innerHTML = '';\n",
              "        dataTable['output_type'] = 'display_data';\n",
              "        await google.colab.output.renderOutput(dataTable, element);\n",
              "        const docLink = document.createElement('div');\n",
              "        docLink.innerHTML = docLinkHtml;\n",
              "        element.appendChild(docLink);\n",
              "      }\n",
              "    </script>\n",
              "  </div>\n",
              "\n",
              "\n",
              "    <div id=\"df-8b90ab5b-c52b-4ce8-9058-049423611b98\">\n",
              "      <button class=\"colab-df-quickchart\" onclick=\"quickchart('df-8b90ab5b-c52b-4ce8-9058-049423611b98')\"\n",
              "                title=\"Suggest charts\"\n",
              "                style=\"display:none;\">\n",
              "\n",
              "<svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\"viewBox=\"0 0 24 24\"\n",
              "     width=\"24px\">\n",
              "    <g>\n",
              "        <path d=\"M19 3H5c-1.1 0-2 .9-2 2v14c0 1.1.9 2 2 2h14c1.1 0 2-.9 2-2V5c0-1.1-.9-2-2-2zM9 17H7v-7h2v7zm4 0h-2V7h2v10zm4 0h-2v-4h2v4z\"/>\n",
              "    </g>\n",
              "</svg>\n",
              "      </button>\n",
              "\n",
              "<style>\n",
              "  .colab-df-quickchart {\n",
              "      --bg-color: #E8F0FE;\n",
              "      --fill-color: #1967D2;\n",
              "      --hover-bg-color: #E2EBFA;\n",
              "      --hover-fill-color: #174EA6;\n",
              "      --disabled-fill-color: #AAA;\n",
              "      --disabled-bg-color: #DDD;\n",
              "  }\n",
              "\n",
              "  [theme=dark] .colab-df-quickchart {\n",
              "      --bg-color: #3B4455;\n",
              "      --fill-color: #D2E3FC;\n",
              "      --hover-bg-color: #434B5C;\n",
              "      --hover-fill-color: #FFFFFF;\n",
              "      --disabled-bg-color: #3B4455;\n",
              "      --disabled-fill-color: #666;\n",
              "  }\n",
              "\n",
              "  .colab-df-quickchart {\n",
              "    background-color: var(--bg-color);\n",
              "    border: none;\n",
              "    border-radius: 50%;\n",
              "    cursor: pointer;\n",
              "    display: none;\n",
              "    fill: var(--fill-color);\n",
              "    height: 32px;\n",
              "    padding: 0;\n",
              "    width: 32px;\n",
              "  }\n",
              "\n",
              "  .colab-df-quickchart:hover {\n",
              "    background-color: var(--hover-bg-color);\n",
              "    box-shadow: 0 1px 2px rgba(60, 64, 67, 0.3), 0 1px 3px 1px rgba(60, 64, 67, 0.15);\n",
              "    fill: var(--button-hover-fill-color);\n",
              "  }\n",
              "\n",
              "  .colab-df-quickchart-complete:disabled,\n",
              "  .colab-df-quickchart-complete:disabled:hover {\n",
              "    background-color: var(--disabled-bg-color);\n",
              "    fill: var(--disabled-fill-color);\n",
              "    box-shadow: none;\n",
              "  }\n",
              "\n",
              "  .colab-df-spinner {\n",
              "    border: 2px solid var(--fill-color);\n",
              "    border-color: transparent;\n",
              "    border-bottom-color: var(--fill-color);\n",
              "    animation:\n",
              "      spin 1s steps(1) infinite;\n",
              "  }\n",
              "\n",
              "  @keyframes spin {\n",
              "    0% {\n",
              "      border-color: transparent;\n",
              "      border-bottom-color: var(--fill-color);\n",
              "      border-left-color: var(--fill-color);\n",
              "    }\n",
              "    20% {\n",
              "      border-color: transparent;\n",
              "      border-left-color: var(--fill-color);\n",
              "      border-top-color: var(--fill-color);\n",
              "    }\n",
              "    30% {\n",
              "      border-color: transparent;\n",
              "      border-left-color: var(--fill-color);\n",
              "      border-top-color: var(--fill-color);\n",
              "      border-right-color: var(--fill-color);\n",
              "    }\n",
              "    40% {\n",
              "      border-color: transparent;\n",
              "      border-right-color: var(--fill-color);\n",
              "      border-top-color: var(--fill-color);\n",
              "    }\n",
              "    60% {\n",
              "      border-color: transparent;\n",
              "      border-right-color: var(--fill-color);\n",
              "    }\n",
              "    80% {\n",
              "      border-color: transparent;\n",
              "      border-right-color: var(--fill-color);\n",
              "      border-bottom-color: var(--fill-color);\n",
              "    }\n",
              "    90% {\n",
              "      border-color: transparent;\n",
              "      border-bottom-color: var(--fill-color);\n",
              "    }\n",
              "  }\n",
              "</style>\n",
              "\n",
              "      <script>\n",
              "        async function quickchart(key) {\n",
              "          const quickchartButtonEl =\n",
              "            document.querySelector('#' + key + ' button');\n",
              "          quickchartButtonEl.disabled = true;  // To prevent multiple clicks.\n",
              "          quickchartButtonEl.classList.add('colab-df-spinner');\n",
              "          try {\n",
              "            const charts = await google.colab.kernel.invokeFunction(\n",
              "                'suggestCharts', [key], {});\n",
              "          } catch (error) {\n",
              "            console.error('Error during call to suggestCharts:', error);\n",
              "          }\n",
              "          quickchartButtonEl.classList.remove('colab-df-spinner');\n",
              "          quickchartButtonEl.classList.add('colab-df-quickchart-complete');\n",
              "        }\n",
              "        (() => {\n",
              "          let quickchartButtonEl =\n",
              "            document.querySelector('#df-8b90ab5b-c52b-4ce8-9058-049423611b98 button');\n",
              "          quickchartButtonEl.style.display =\n",
              "            google.colab.kernel.accessAllowed ? 'block' : 'none';\n",
              "        })();\n",
              "      </script>\n",
              "    </div>\n",
              "\n",
              "    </div>\n",
              "  </div>\n"
            ],
            "application/vnd.google.colaboratory.intrinsic+json": {
              "type": "dataframe",
              "variable_name": "theOriginalData",
              "summary": "{\n  \"name\": \"theOriginalData\",\n  \"rows\": 37069,\n  \"fields\": [\n    {\n      \"column\": \"age\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 10,\n        \"min\": 17,\n        \"max\": 98,\n        \"num_unique_values\": 78,\n        \"samples\": [\n          28,\n          56,\n          27\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"job\",\n      \"properties\": {\n        \"dtype\": \"category\",\n        \"num_unique_values\": 12,\n        \"samples\": [\n          \"entrepreneur\",\n          \"management\",\n          \"housemaid\"\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"marital\",\n      \"properties\": {\n        \"dtype\": \"category\",\n        \"num_unique_values\": 4,\n        \"samples\": [\n          \"single\",\n          \"unknown\",\n          \"married\"\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"education\",\n      \"properties\": {\n        \"dtype\": \"category\",\n        \"num_unique_values\": 8,\n        \"samples\": [\n          \"high.school\",\n          \"unknown\",\n          \"basic.4y\"\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"default\",\n      \"properties\": {\n        \"dtype\": \"category\",\n        \"num_unique_values\": 3,\n        \"samples\": [\n          \"no\",\n          \"unknown\",\n          \"yes\"\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"housing\",\n      \"properties\": {\n        \"dtype\": \"category\",\n        \"num_unique_values\": 3,\n        \"samples\": [\n          \"no\",\n          \"yes\",\n          \"unknown\"\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"loan\",\n      \"properties\": {\n        \"dtype\": \"category\",\n        \"num_unique_values\": 3,\n        \"samples\": [\n          \"no\",\n          \"yes\",\n          \"unknown\"\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"contact\",\n      \"properties\": {\n        \"dtype\": \"category\",\n        \"num_unique_values\": 2,\n        \"samples\": [\n          \"cellular\",\n          \"telephone\"\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"month\",\n      \"properties\": {\n        \"dtype\": \"category\",\n        \"num_unique_values\": 10,\n        \"samples\": [\n          \"apr\",\n          \"jun\"\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"day_of_week\",\n      \"properties\": {\n        \"dtype\": \"category\",\n        \"num_unique_values\": 5,\n        \"samples\": [\n          \"tue\",\n          \"fri\"\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"campaign\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 2,\n        \"min\": 1,\n        \"max\": 56,\n        \"num_unique_values\": 41,\n        \"samples\": [\n          35,\n          19\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"pdays\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 187,\n        \"min\": 0,\n        \"max\": 999,\n        \"num_unique_values\": 27,\n        \"samples\": [\n          7,\n          12\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"previous\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 0,\n        \"min\": 0,\n        \"max\": 7,\n        \"num_unique_values\": 8,\n        \"samples\": [\n          1,\n          5\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"poutcome\",\n      \"properties\": {\n        \"dtype\": \"category\",\n        \"num_unique_values\": 3,\n        \"samples\": [\n          \"nonexistent\",\n          \"failure\"\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"emp.var.rate\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 1.5722872589150396,\n        \"min\": -3.4,\n        \"max\": 1.4,\n        \"num_unique_values\": 10,\n        \"samples\": [\n          -1.7,\n          1.4\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"cons.price.idx\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 0.5793386580321098,\n        \"min\": 92.201,\n        \"max\": 94.767,\n        \"num_unique_values\": 26,\n        \"samples\": [\n          93.075,\n          92.713\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"cons.conf.idx\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 4.628895451881355,\n        \"min\": -50.8,\n        \"max\": -26.9,\n        \"num_unique_values\": 26,\n        \"samples\": [\n          -47.1,\n          -33.0\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"euribor3m\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 1.7344958164374205,\n        \"min\": 0.634,\n        \"max\": 5.045,\n        \"num_unique_values\": 314,\n        \"samples\": [\n          0.969,\n          4.76\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"nr.employed\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 72.29447628833586,\n        \"min\": 4963.6,\n        \"max\": 5228.1,\n        \"num_unique_values\": 11,\n        \"samples\": [\n          5076.2,\n          5191.0\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"y\",\n      \"properties\": {\n        \"dtype\": \"category\",\n        \"num_unique_values\": 2,\n        \"samples\": [\n          \"yes\",\n          \"no\"\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    }\n  ]\n}"
            }
          },
          "metadata": {},
          "execution_count": 160
        }
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "mA0HPVmIBT4C"
      },
      "source": [
        "theData = theOriginalData\n",
        "\n",
        "# Lower case column names and remove any leading or training whitespace characters\n",
        "theData.columns = theOriginalData.columns.str.strip().str.lower()\n",
        "\n",
        "# Replace all 'unknown' values\n",
        "theData = theData.replace('unknown', pd.NA).copy()\n",
        "\n",
        "# Define target value and set it to a binary\n",
        "theData['theTarget'] = theData['y'].map({'yes': 1, 'no': 0})\n"
      ],
      "execution_count": 161,
      "outputs": []
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "StiU5QcPPxqQ",
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 236
        },
        "collapsed": true,
        "outputId": "417a26c9-f521-4d03-b8ce-acfedb9f05d1"
      },
      "source": [
        "theData.head(5)"
      ],
      "execution_count": 162,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "   age        job  marital    education default housing loan    contact month  \\\n",
              "0   56  housemaid  married     basic.4y      no      no   no  telephone   may   \n",
              "1   57   services  married  high.school    <NA>      no   no  telephone   may   \n",
              "2   37   services  married  high.school      no     yes   no  telephone   may   \n",
              "3   40     admin.  married     basic.6y      no      no   no  telephone   may   \n",
              "4   56   services  married  high.school      no      no  yes  telephone   may   \n",
              "\n",
              "  day_of_week  ...  pdays  previous     poutcome emp.var.rate  cons.price.idx  \\\n",
              "0         mon  ...    999         0  nonexistent          1.1          93.994   \n",
              "1         mon  ...    999         0  nonexistent          1.1          93.994   \n",
              "2         mon  ...    999         0  nonexistent          1.1          93.994   \n",
              "3         mon  ...    999         0  nonexistent          1.1          93.994   \n",
              "4         mon  ...    999         0  nonexistent          1.1          93.994   \n",
              "\n",
              "   cons.conf.idx  euribor3m  nr.employed   y theTarget  \n",
              "0          -36.4      4.857       5191.0  no         0  \n",
              "1          -36.4      4.857       5191.0  no         0  \n",
              "2          -36.4      4.857       5191.0  no         0  \n",
              "3          -36.4      4.857       5191.0  no         0  \n",
              "4          -36.4      4.857       5191.0  no         0  \n",
              "\n",
              "[5 rows x 21 columns]"
            ],
            "text/html": [
              "\n",
              "  <div id=\"df-df30e994-f9e9-4621-a18d-383ce81d1a8a\" class=\"colab-df-container\">\n",
              "    <div>\n",
              "<style scoped>\n",
              "    .dataframe tbody tr th:only-of-type {\n",
              "        vertical-align: middle;\n",
              "    }\n",
              "\n",
              "    .dataframe tbody tr th {\n",
              "        vertical-align: top;\n",
              "    }\n",
              "\n",
              "    .dataframe thead th {\n",
              "        text-align: right;\n",
              "    }\n",
              "</style>\n",
              "<table border=\"1\" class=\"dataframe\">\n",
              "  <thead>\n",
              "    <tr style=\"text-align: right;\">\n",
              "      <th></th>\n",
              "      <th>age</th>\n",
              "      <th>job</th>\n",
              "      <th>marital</th>\n",
              "      <th>education</th>\n",
              "      <th>default</th>\n",
              "      <th>housing</th>\n",
              "      <th>loan</th>\n",
              "      <th>contact</th>\n",
              "      <th>month</th>\n",
              "      <th>day_of_week</th>\n",
              "      <th>...</th>\n",
              "      <th>pdays</th>\n",
              "      <th>previous</th>\n",
              "      <th>poutcome</th>\n",
              "      <th>emp.var.rate</th>\n",
              "      <th>cons.price.idx</th>\n",
              "      <th>cons.conf.idx</th>\n",
              "      <th>euribor3m</th>\n",
              "      <th>nr.employed</th>\n",
              "      <th>y</th>\n",
              "      <th>theTarget</th>\n",
              "    </tr>\n",
              "  </thead>\n",
              "  <tbody>\n",
              "    <tr>\n",
              "      <th>0</th>\n",
              "      <td>56</td>\n",
              "      <td>housemaid</td>\n",
              "      <td>married</td>\n",
              "      <td>basic.4y</td>\n",
              "      <td>no</td>\n",
              "      <td>no</td>\n",
              "      <td>no</td>\n",
              "      <td>telephone</td>\n",
              "      <td>may</td>\n",
              "      <td>mon</td>\n",
              "      <td>...</td>\n",
              "      <td>999</td>\n",
              "      <td>0</td>\n",
              "      <td>nonexistent</td>\n",
              "      <td>1.1</td>\n",
              "      <td>93.994</td>\n",
              "      <td>-36.4</td>\n",
              "      <td>4.857</td>\n",
              "      <td>5191.0</td>\n",
              "      <td>no</td>\n",
              "      <td>0</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>1</th>\n",
              "      <td>57</td>\n",
              "      <td>services</td>\n",
              "      <td>married</td>\n",
              "      <td>high.school</td>\n",
              "      <td>&lt;NA&gt;</td>\n",
              "      <td>no</td>\n",
              "      <td>no</td>\n",
              "      <td>telephone</td>\n",
              "      <td>may</td>\n",
              "      <td>mon</td>\n",
              "      <td>...</td>\n",
              "      <td>999</td>\n",
              "      <td>0</td>\n",
              "      <td>nonexistent</td>\n",
              "      <td>1.1</td>\n",
              "      <td>93.994</td>\n",
              "      <td>-36.4</td>\n",
              "      <td>4.857</td>\n",
              "      <td>5191.0</td>\n",
              "      <td>no</td>\n",
              "      <td>0</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>2</th>\n",
              "      <td>37</td>\n",
              "      <td>services</td>\n",
              "      <td>married</td>\n",
              "      <td>high.school</td>\n",
              "      <td>no</td>\n",
              "      <td>yes</td>\n",
              "      <td>no</td>\n",
              "      <td>telephone</td>\n",
              "      <td>may</td>\n",
              "      <td>mon</td>\n",
              "      <td>...</td>\n",
              "      <td>999</td>\n",
              "      <td>0</td>\n",
              "      <td>nonexistent</td>\n",
              "      <td>1.1</td>\n",
              "      <td>93.994</td>\n",
              "      <td>-36.4</td>\n",
              "      <td>4.857</td>\n",
              "      <td>5191.0</td>\n",
              "      <td>no</td>\n",
              "      <td>0</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>3</th>\n",
              "      <td>40</td>\n",
              "      <td>admin.</td>\n",
              "      <td>married</td>\n",
              "      <td>basic.6y</td>\n",
              "      <td>no</td>\n",
              "      <td>no</td>\n",
              "      <td>no</td>\n",
              "      <td>telephone</td>\n",
              "      <td>may</td>\n",
              "      <td>mon</td>\n",
              "      <td>...</td>\n",
              "      <td>999</td>\n",
              "      <td>0</td>\n",
              "      <td>nonexistent</td>\n",
              "      <td>1.1</td>\n",
              "      <td>93.994</td>\n",
              "      <td>-36.4</td>\n",
              "      <td>4.857</td>\n",
              "      <td>5191.0</td>\n",
              "      <td>no</td>\n",
              "      <td>0</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>4</th>\n",
              "      <td>56</td>\n",
              "      <td>services</td>\n",
              "      <td>married</td>\n",
              "      <td>high.school</td>\n",
              "      <td>no</td>\n",
              "      <td>no</td>\n",
              "      <td>yes</td>\n",
              "      <td>telephone</td>\n",
              "      <td>may</td>\n",
              "      <td>mon</td>\n",
              "      <td>...</td>\n",
              "      <td>999</td>\n",
              "      <td>0</td>\n",
              "      <td>nonexistent</td>\n",
              "      <td>1.1</td>\n",
              "      <td>93.994</td>\n",
              "      <td>-36.4</td>\n",
              "      <td>4.857</td>\n",
              "      <td>5191.0</td>\n",
              "      <td>no</td>\n",
              "      <td>0</td>\n",
              "    </tr>\n",
              "  </tbody>\n",
              "</table>\n",
              "<p>5 rows × 21 columns</p>\n",
              "</div>\n",
              "    <div class=\"colab-df-buttons\">\n",
              "\n",
              "  <div class=\"colab-df-container\">\n",
              "    <button class=\"colab-df-convert\" onclick=\"convertToInteractive('df-df30e994-f9e9-4621-a18d-383ce81d1a8a')\"\n",
              "            title=\"Convert this dataframe to an interactive table.\"\n",
              "            style=\"display:none;\">\n",
              "\n",
              "  <svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\" viewBox=\"0 -960 960 960\">\n",
              "    <path d=\"M120-120v-720h720v720H120Zm60-500h600v-160H180v160Zm220 220h160v-160H400v160Zm0 220h160v-160H400v160ZM180-400h160v-160H180v160Zm440 0h160v-160H620v160ZM180-180h160v-160H180v160Zm440 0h160v-160H620v160Z\"/>\n",
              "  </svg>\n",
              "    </button>\n",
              "\n",
              "  <style>\n",
              "    .colab-df-container {\n",
              "      display:flex;\n",
              "      gap: 12px;\n",
              "    }\n",
              "\n",
              "    .colab-df-convert {\n",
              "      background-color: #E8F0FE;\n",
              "      border: none;\n",
              "      border-radius: 50%;\n",
              "      cursor: pointer;\n",
              "      display: none;\n",
              "      fill: #1967D2;\n",
              "      height: 32px;\n",
              "      padding: 0 0 0 0;\n",
              "      width: 32px;\n",
              "    }\n",
              "\n",
              "    .colab-df-convert:hover {\n",
              "      background-color: #E2EBFA;\n",
              "      box-shadow: 0px 1px 2px rgba(60, 64, 67, 0.3), 0px 1px 3px 1px rgba(60, 64, 67, 0.15);\n",
              "      fill: #174EA6;\n",
              "    }\n",
              "\n",
              "    .colab-df-buttons div {\n",
              "      margin-bottom: 4px;\n",
              "    }\n",
              "\n",
              "    [theme=dark] .colab-df-convert {\n",
              "      background-color: #3B4455;\n",
              "      fill: #D2E3FC;\n",
              "    }\n",
              "\n",
              "    [theme=dark] .colab-df-convert:hover {\n",
              "      background-color: #434B5C;\n",
              "      box-shadow: 0px 1px 3px 1px rgba(0, 0, 0, 0.15);\n",
              "      filter: drop-shadow(0px 1px 2px rgba(0, 0, 0, 0.3));\n",
              "      fill: #FFFFFF;\n",
              "    }\n",
              "  </style>\n",
              "\n",
              "    <script>\n",
              "      const buttonEl =\n",
              "        document.querySelector('#df-df30e994-f9e9-4621-a18d-383ce81d1a8a button.colab-df-convert');\n",
              "      buttonEl.style.display =\n",
              "        google.colab.kernel.accessAllowed ? 'block' : 'none';\n",
              "\n",
              "      async function convertToInteractive(key) {\n",
              "        const element = document.querySelector('#df-df30e994-f9e9-4621-a18d-383ce81d1a8a');\n",
              "        const dataTable =\n",
              "          await google.colab.kernel.invokeFunction('convertToInteractive',\n",
              "                                                    [key], {});\n",
              "        if (!dataTable) return;\n",
              "\n",
              "        const docLinkHtml = 'Like what you see? Visit the ' +\n",
              "          '<a target=\"_blank\" href=https://colab.research.google.com/notebooks/data_table.ipynb>data table notebook</a>'\n",
              "          + ' to learn more about interactive tables.';\n",
              "        element.innerHTML = '';\n",
              "        dataTable['output_type'] = 'display_data';\n",
              "        await google.colab.output.renderOutput(dataTable, element);\n",
              "        const docLink = document.createElement('div');\n",
              "        docLink.innerHTML = docLinkHtml;\n",
              "        element.appendChild(docLink);\n",
              "      }\n",
              "    </script>\n",
              "  </div>\n",
              "\n",
              "\n",
              "    <div id=\"df-07848961-386f-4cf0-862f-4d58cdb892ca\">\n",
              "      <button class=\"colab-df-quickchart\" onclick=\"quickchart('df-07848961-386f-4cf0-862f-4d58cdb892ca')\"\n",
              "                title=\"Suggest charts\"\n",
              "                style=\"display:none;\">\n",
              "\n",
              "<svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\"viewBox=\"0 0 24 24\"\n",
              "     width=\"24px\">\n",
              "    <g>\n",
              "        <path d=\"M19 3H5c-1.1 0-2 .9-2 2v14c0 1.1.9 2 2 2h14c1.1 0 2-.9 2-2V5c0-1.1-.9-2-2-2zM9 17H7v-7h2v7zm4 0h-2V7h2v10zm4 0h-2v-4h2v4z\"/>\n",
              "    </g>\n",
              "</svg>\n",
              "      </button>\n",
              "\n",
              "<style>\n",
              "  .colab-df-quickchart {\n",
              "      --bg-color: #E8F0FE;\n",
              "      --fill-color: #1967D2;\n",
              "      --hover-bg-color: #E2EBFA;\n",
              "      --hover-fill-color: #174EA6;\n",
              "      --disabled-fill-color: #AAA;\n",
              "      --disabled-bg-color: #DDD;\n",
              "  }\n",
              "\n",
              "  [theme=dark] .colab-df-quickchart {\n",
              "      --bg-color: #3B4455;\n",
              "      --fill-color: #D2E3FC;\n",
              "      --hover-bg-color: #434B5C;\n",
              "      --hover-fill-color: #FFFFFF;\n",
              "      --disabled-bg-color: #3B4455;\n",
              "      --disabled-fill-color: #666;\n",
              "  }\n",
              "\n",
              "  .colab-df-quickchart {\n",
              "    background-color: var(--bg-color);\n",
              "    border: none;\n",
              "    border-radius: 50%;\n",
              "    cursor: pointer;\n",
              "    display: none;\n",
              "    fill: var(--fill-color);\n",
              "    height: 32px;\n",
              "    padding: 0;\n",
              "    width: 32px;\n",
              "  }\n",
              "\n",
              "  .colab-df-quickchart:hover {\n",
              "    background-color: var(--hover-bg-color);\n",
              "    box-shadow: 0 1px 2px rgba(60, 64, 67, 0.3), 0 1px 3px 1px rgba(60, 64, 67, 0.15);\n",
              "    fill: var(--button-hover-fill-color);\n",
              "  }\n",
              "\n",
              "  .colab-df-quickchart-complete:disabled,\n",
              "  .colab-df-quickchart-complete:disabled:hover {\n",
              "    background-color: var(--disabled-bg-color);\n",
              "    fill: var(--disabled-fill-color);\n",
              "    box-shadow: none;\n",
              "  }\n",
              "\n",
              "  .colab-df-spinner {\n",
              "    border: 2px solid var(--fill-color);\n",
              "    border-color: transparent;\n",
              "    border-bottom-color: var(--fill-color);\n",
              "    animation:\n",
              "      spin 1s steps(1) infinite;\n",
              "  }\n",
              "\n",
              "  @keyframes spin {\n",
              "    0% {\n",
              "      border-color: transparent;\n",
              "      border-bottom-color: var(--fill-color);\n",
              "      border-left-color: var(--fill-color);\n",
              "    }\n",
              "    20% {\n",
              "      border-color: transparent;\n",
              "      border-left-color: var(--fill-color);\n",
              "      border-top-color: var(--fill-color);\n",
              "    }\n",
              "    30% {\n",
              "      border-color: transparent;\n",
              "      border-left-color: var(--fill-color);\n",
              "      border-top-color: var(--fill-color);\n",
              "      border-right-color: var(--fill-color);\n",
              "    }\n",
              "    40% {\n",
              "      border-color: transparent;\n",
              "      border-right-color: var(--fill-color);\n",
              "      border-top-color: var(--fill-color);\n",
              "    }\n",
              "    60% {\n",
              "      border-color: transparent;\n",
              "      border-right-color: var(--fill-color);\n",
              "    }\n",
              "    80% {\n",
              "      border-color: transparent;\n",
              "      border-right-color: var(--fill-color);\n",
              "      border-bottom-color: var(--fill-color);\n",
              "    }\n",
              "    90% {\n",
              "      border-color: transparent;\n",
              "      border-bottom-color: var(--fill-color);\n",
              "    }\n",
              "  }\n",
              "</style>\n",
              "\n",
              "      <script>\n",
              "        async function quickchart(key) {\n",
              "          const quickchartButtonEl =\n",
              "            document.querySelector('#' + key + ' button');\n",
              "          quickchartButtonEl.disabled = true;  // To prevent multiple clicks.\n",
              "          quickchartButtonEl.classList.add('colab-df-spinner');\n",
              "          try {\n",
              "            const charts = await google.colab.kernel.invokeFunction(\n",
              "                'suggestCharts', [key], {});\n",
              "          } catch (error) {\n",
              "            console.error('Error during call to suggestCharts:', error);\n",
              "          }\n",
              "          quickchartButtonEl.classList.remove('colab-df-spinner');\n",
              "          quickchartButtonEl.classList.add('colab-df-quickchart-complete');\n",
              "        }\n",
              "        (() => {\n",
              "          let quickchartButtonEl =\n",
              "            document.querySelector('#df-07848961-386f-4cf0-862f-4d58cdb892ca button');\n",
              "          quickchartButtonEl.style.display =\n",
              "            google.colab.kernel.accessAllowed ? 'block' : 'none';\n",
              "        })();\n",
              "      </script>\n",
              "    </div>\n",
              "\n",
              "    </div>\n",
              "  </div>\n"
            ],
            "application/vnd.google.colaboratory.intrinsic+json": {
              "type": "dataframe",
              "variable_name": "theData"
            }
          },
          "metadata": {},
          "execution_count": 162
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [],
      "metadata": {
        "id": "f7FgCOEjULV0"
      },
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "markdown",
      "source": [
        "# Report - Original Dataset"
      ],
      "metadata": {
        "id": "0qDs_hxlUEpV"
      }
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "ALLMN63FPyEQ",
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 677
        },
        "collapsed": true,
        "outputId": "b717e878-8daf-49f4-a08a-fcfdf813f45d"
      },
      "source": [
        "reportDatasetSummary(theData, 'columnName')"
      ],
      "execution_count": 129,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "        columnName  numberOfNAValues  numberOfDistinctValues columnType  \\\n",
              "0              age                 0                      78      int64   \n",
              "10        campaign                 0                      41      int64   \n",
              "16   cons.conf.idx                 0                      26    float64   \n",
              "15  cons.price.idx                 0                      26    float64   \n",
              "7          contact                 0                       2     object   \n",
              "9      day_of_week                 0                       5     object   \n",
              "4          default              7725                       2     object   \n",
              "3        education              1535                       7     object   \n",
              "14    emp.var.rate                 0                      10    float64   \n",
              "17       euribor3m                 0                     314    float64   \n",
              "5          housing               894                       2     object   \n",
              "1              job               294                      11     object   \n",
              "6             loan               894                       2     object   \n",
              "2          marital                69                       3     object   \n",
              "8            month                 0                      10     object   \n",
              "18     nr.employed                 0                      11    float64   \n",
              "11           pdays                 0                      27      int64   \n",
              "13        poutcome                 0                       3     object   \n",
              "12        previous                 0                       8      int64   \n",
              "19               y                 0                       2     object   \n",
              "\n",
              "    minValue  maxValue  \n",
              "0     17.000    98.000  \n",
              "10     1.000    56.000  \n",
              "16   -50.800   -26.900  \n",
              "15    92.201    94.767  \n",
              "7        NaN       NaN  \n",
              "9        NaN       NaN  \n",
              "4        NaN       NaN  \n",
              "3        NaN       NaN  \n",
              "14    -3.400     1.400  \n",
              "17     0.634     5.045  \n",
              "5        NaN       NaN  \n",
              "1        NaN       NaN  \n",
              "6        NaN       NaN  \n",
              "2        NaN       NaN  \n",
              "8        NaN       NaN  \n",
              "18  4963.600  5228.100  \n",
              "11     0.000   999.000  \n",
              "13       NaN       NaN  \n",
              "12     0.000     7.000  \n",
              "19       NaN       NaN  "
            ],
            "text/html": [
              "\n",
              "  <div id=\"df-b9e2b9d9-9921-4e8a-9807-c03626183122\" class=\"colab-df-container\">\n",
              "    <div>\n",
              "<style scoped>\n",
              "    .dataframe tbody tr th:only-of-type {\n",
              "        vertical-align: middle;\n",
              "    }\n",
              "\n",
              "    .dataframe tbody tr th {\n",
              "        vertical-align: top;\n",
              "    }\n",
              "\n",
              "    .dataframe thead th {\n",
              "        text-align: right;\n",
              "    }\n",
              "</style>\n",
              "<table border=\"1\" class=\"dataframe\">\n",
              "  <thead>\n",
              "    <tr style=\"text-align: right;\">\n",
              "      <th></th>\n",
              "      <th>columnName</th>\n",
              "      <th>numberOfNAValues</th>\n",
              "      <th>numberOfDistinctValues</th>\n",
              "      <th>columnType</th>\n",
              "      <th>minValue</th>\n",
              "      <th>maxValue</th>\n",
              "    </tr>\n",
              "  </thead>\n",
              "  <tbody>\n",
              "    <tr>\n",
              "      <th>0</th>\n",
              "      <td>age</td>\n",
              "      <td>0</td>\n",
              "      <td>78</td>\n",
              "      <td>int64</td>\n",
              "      <td>17.000</td>\n",
              "      <td>98.000</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>10</th>\n",
              "      <td>campaign</td>\n",
              "      <td>0</td>\n",
              "      <td>41</td>\n",
              "      <td>int64</td>\n",
              "      <td>1.000</td>\n",
              "      <td>56.000</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>16</th>\n",
              "      <td>cons.conf.idx</td>\n",
              "      <td>0</td>\n",
              "      <td>26</td>\n",
              "      <td>float64</td>\n",
              "      <td>-50.800</td>\n",
              "      <td>-26.900</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>15</th>\n",
              "      <td>cons.price.idx</td>\n",
              "      <td>0</td>\n",
              "      <td>26</td>\n",
              "      <td>float64</td>\n",
              "      <td>92.201</td>\n",
              "      <td>94.767</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>7</th>\n",
              "      <td>contact</td>\n",
              "      <td>0</td>\n",
              "      <td>2</td>\n",
              "      <td>object</td>\n",
              "      <td>NaN</td>\n",
              "      <td>NaN</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>9</th>\n",
              "      <td>day_of_week</td>\n",
              "      <td>0</td>\n",
              "      <td>5</td>\n",
              "      <td>object</td>\n",
              "      <td>NaN</td>\n",
              "      <td>NaN</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>4</th>\n",
              "      <td>default</td>\n",
              "      <td>7725</td>\n",
              "      <td>2</td>\n",
              "      <td>object</td>\n",
              "      <td>NaN</td>\n",
              "      <td>NaN</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>3</th>\n",
              "      <td>education</td>\n",
              "      <td>1535</td>\n",
              "      <td>7</td>\n",
              "      <td>object</td>\n",
              "      <td>NaN</td>\n",
              "      <td>NaN</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>14</th>\n",
              "      <td>emp.var.rate</td>\n",
              "      <td>0</td>\n",
              "      <td>10</td>\n",
              "      <td>float64</td>\n",
              "      <td>-3.400</td>\n",
              "      <td>1.400</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>17</th>\n",
              "      <td>euribor3m</td>\n",
              "      <td>0</td>\n",
              "      <td>314</td>\n",
              "      <td>float64</td>\n",
              "      <td>0.634</td>\n",
              "      <td>5.045</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>5</th>\n",
              "      <td>housing</td>\n",
              "      <td>894</td>\n",
              "      <td>2</td>\n",
              "      <td>object</td>\n",
              "      <td>NaN</td>\n",
              "      <td>NaN</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>1</th>\n",
              "      <td>job</td>\n",
              "      <td>294</td>\n",
              "      <td>11</td>\n",
              "      <td>object</td>\n",
              "      <td>NaN</td>\n",
              "      <td>NaN</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>6</th>\n",
              "      <td>loan</td>\n",
              "      <td>894</td>\n",
              "      <td>2</td>\n",
              "      <td>object</td>\n",
              "      <td>NaN</td>\n",
              "      <td>NaN</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>2</th>\n",
              "      <td>marital</td>\n",
              "      <td>69</td>\n",
              "      <td>3</td>\n",
              "      <td>object</td>\n",
              "      <td>NaN</td>\n",
              "      <td>NaN</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>8</th>\n",
              "      <td>month</td>\n",
              "      <td>0</td>\n",
              "      <td>10</td>\n",
              "      <td>object</td>\n",
              "      <td>NaN</td>\n",
              "      <td>NaN</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>18</th>\n",
              "      <td>nr.employed</td>\n",
              "      <td>0</td>\n",
              "      <td>11</td>\n",
              "      <td>float64</td>\n",
              "      <td>4963.600</td>\n",
              "      <td>5228.100</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>11</th>\n",
              "      <td>pdays</td>\n",
              "      <td>0</td>\n",
              "      <td>27</td>\n",
              "      <td>int64</td>\n",
              "      <td>0.000</td>\n",
              "      <td>999.000</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>13</th>\n",
              "      <td>poutcome</td>\n",
              "      <td>0</td>\n",
              "      <td>3</td>\n",
              "      <td>object</td>\n",
              "      <td>NaN</td>\n",
              "      <td>NaN</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>12</th>\n",
              "      <td>previous</td>\n",
              "      <td>0</td>\n",
              "      <td>8</td>\n",
              "      <td>int64</td>\n",
              "      <td>0.000</td>\n",
              "      <td>7.000</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>19</th>\n",
              "      <td>y</td>\n",
              "      <td>0</td>\n",
              "      <td>2</td>\n",
              "      <td>object</td>\n",
              "      <td>NaN</td>\n",
              "      <td>NaN</td>\n",
              "    </tr>\n",
              "  </tbody>\n",
              "</table>\n",
              "</div>\n",
              "    <div class=\"colab-df-buttons\">\n",
              "\n",
              "  <div class=\"colab-df-container\">\n",
              "    <button class=\"colab-df-convert\" onclick=\"convertToInteractive('df-b9e2b9d9-9921-4e8a-9807-c03626183122')\"\n",
              "            title=\"Convert this dataframe to an interactive table.\"\n",
              "            style=\"display:none;\">\n",
              "\n",
              "  <svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\" viewBox=\"0 -960 960 960\">\n",
              "    <path d=\"M120-120v-720h720v720H120Zm60-500h600v-160H180v160Zm220 220h160v-160H400v160Zm0 220h160v-160H400v160ZM180-400h160v-160H180v160Zm440 0h160v-160H620v160ZM180-180h160v-160H180v160Zm440 0h160v-160H620v160Z\"/>\n",
              "  </svg>\n",
              "    </button>\n",
              "\n",
              "  <style>\n",
              "    .colab-df-container {\n",
              "      display:flex;\n",
              "      gap: 12px;\n",
              "    }\n",
              "\n",
              "    .colab-df-convert {\n",
              "      background-color: #E8F0FE;\n",
              "      border: none;\n",
              "      border-radius: 50%;\n",
              "      cursor: pointer;\n",
              "      display: none;\n",
              "      fill: #1967D2;\n",
              "      height: 32px;\n",
              "      padding: 0 0 0 0;\n",
              "      width: 32px;\n",
              "    }\n",
              "\n",
              "    .colab-df-convert:hover {\n",
              "      background-color: #E2EBFA;\n",
              "      box-shadow: 0px 1px 2px rgba(60, 64, 67, 0.3), 0px 1px 3px 1px rgba(60, 64, 67, 0.15);\n",
              "      fill: #174EA6;\n",
              "    }\n",
              "\n",
              "    .colab-df-buttons div {\n",
              "      margin-bottom: 4px;\n",
              "    }\n",
              "\n",
              "    [theme=dark] .colab-df-convert {\n",
              "      background-color: #3B4455;\n",
              "      fill: #D2E3FC;\n",
              "    }\n",
              "\n",
              "    [theme=dark] .colab-df-convert:hover {\n",
              "      background-color: #434B5C;\n",
              "      box-shadow: 0px 1px 3px 1px rgba(0, 0, 0, 0.15);\n",
              "      filter: drop-shadow(0px 1px 2px rgba(0, 0, 0, 0.3));\n",
              "      fill: #FFFFFF;\n",
              "    }\n",
              "  </style>\n",
              "\n",
              "    <script>\n",
              "      const buttonEl =\n",
              "        document.querySelector('#df-b9e2b9d9-9921-4e8a-9807-c03626183122 button.colab-df-convert');\n",
              "      buttonEl.style.display =\n",
              "        google.colab.kernel.accessAllowed ? 'block' : 'none';\n",
              "\n",
              "      async function convertToInteractive(key) {\n",
              "        const element = document.querySelector('#df-b9e2b9d9-9921-4e8a-9807-c03626183122');\n",
              "        const dataTable =\n",
              "          await google.colab.kernel.invokeFunction('convertToInteractive',\n",
              "                                                    [key], {});\n",
              "        if (!dataTable) return;\n",
              "\n",
              "        const docLinkHtml = 'Like what you see? Visit the ' +\n",
              "          '<a target=\"_blank\" href=https://colab.research.google.com/notebooks/data_table.ipynb>data table notebook</a>'\n",
              "          + ' to learn more about interactive tables.';\n",
              "        element.innerHTML = '';\n",
              "        dataTable['output_type'] = 'display_data';\n",
              "        await google.colab.output.renderOutput(dataTable, element);\n",
              "        const docLink = document.createElement('div');\n",
              "        docLink.innerHTML = docLinkHtml;\n",
              "        element.appendChild(docLink);\n",
              "      }\n",
              "    </script>\n",
              "  </div>\n",
              "\n",
              "\n",
              "    <div id=\"df-5c6a1d34-6456-4370-92a5-d13a9508d396\">\n",
              "      <button class=\"colab-df-quickchart\" onclick=\"quickchart('df-5c6a1d34-6456-4370-92a5-d13a9508d396')\"\n",
              "                title=\"Suggest charts\"\n",
              "                style=\"display:none;\">\n",
              "\n",
              "<svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\"viewBox=\"0 0 24 24\"\n",
              "     width=\"24px\">\n",
              "    <g>\n",
              "        <path d=\"M19 3H5c-1.1 0-2 .9-2 2v14c0 1.1.9 2 2 2h14c1.1 0 2-.9 2-2V5c0-1.1-.9-2-2-2zM9 17H7v-7h2v7zm4 0h-2V7h2v10zm4 0h-2v-4h2v4z\"/>\n",
              "    </g>\n",
              "</svg>\n",
              "      </button>\n",
              "\n",
              "<style>\n",
              "  .colab-df-quickchart {\n",
              "      --bg-color: #E8F0FE;\n",
              "      --fill-color: #1967D2;\n",
              "      --hover-bg-color: #E2EBFA;\n",
              "      --hover-fill-color: #174EA6;\n",
              "      --disabled-fill-color: #AAA;\n",
              "      --disabled-bg-color: #DDD;\n",
              "  }\n",
              "\n",
              "  [theme=dark] .colab-df-quickchart {\n",
              "      --bg-color: #3B4455;\n",
              "      --fill-color: #D2E3FC;\n",
              "      --hover-bg-color: #434B5C;\n",
              "      --hover-fill-color: #FFFFFF;\n",
              "      --disabled-bg-color: #3B4455;\n",
              "      --disabled-fill-color: #666;\n",
              "  }\n",
              "\n",
              "  .colab-df-quickchart {\n",
              "    background-color: var(--bg-color);\n",
              "    border: none;\n",
              "    border-radius: 50%;\n",
              "    cursor: pointer;\n",
              "    display: none;\n",
              "    fill: var(--fill-color);\n",
              "    height: 32px;\n",
              "    padding: 0;\n",
              "    width: 32px;\n",
              "  }\n",
              "\n",
              "  .colab-df-quickchart:hover {\n",
              "    background-color: var(--hover-bg-color);\n",
              "    box-shadow: 0 1px 2px rgba(60, 64, 67, 0.3), 0 1px 3px 1px rgba(60, 64, 67, 0.15);\n",
              "    fill: var(--button-hover-fill-color);\n",
              "  }\n",
              "\n",
              "  .colab-df-quickchart-complete:disabled,\n",
              "  .colab-df-quickchart-complete:disabled:hover {\n",
              "    background-color: var(--disabled-bg-color);\n",
              "    fill: var(--disabled-fill-color);\n",
              "    box-shadow: none;\n",
              "  }\n",
              "\n",
              "  .colab-df-spinner {\n",
              "    border: 2px solid var(--fill-color);\n",
              "    border-color: transparent;\n",
              "    border-bottom-color: var(--fill-color);\n",
              "    animation:\n",
              "      spin 1s steps(1) infinite;\n",
              "  }\n",
              "\n",
              "  @keyframes spin {\n",
              "    0% {\n",
              "      border-color: transparent;\n",
              "      border-bottom-color: var(--fill-color);\n",
              "      border-left-color: var(--fill-color);\n",
              "    }\n",
              "    20% {\n",
              "      border-color: transparent;\n",
              "      border-left-color: var(--fill-color);\n",
              "      border-top-color: var(--fill-color);\n",
              "    }\n",
              "    30% {\n",
              "      border-color: transparent;\n",
              "      border-left-color: var(--fill-color);\n",
              "      border-top-color: var(--fill-color);\n",
              "      border-right-color: var(--fill-color);\n",
              "    }\n",
              "    40% {\n",
              "      border-color: transparent;\n",
              "      border-right-color: var(--fill-color);\n",
              "      border-top-color: var(--fill-color);\n",
              "    }\n",
              "    60% {\n",
              "      border-color: transparent;\n",
              "      border-right-color: var(--fill-color);\n",
              "    }\n",
              "    80% {\n",
              "      border-color: transparent;\n",
              "      border-right-color: var(--fill-color);\n",
              "      border-bottom-color: var(--fill-color);\n",
              "    }\n",
              "    90% {\n",
              "      border-color: transparent;\n",
              "      border-bottom-color: var(--fill-color);\n",
              "    }\n",
              "  }\n",
              "</style>\n",
              "\n",
              "      <script>\n",
              "        async function quickchart(key) {\n",
              "          const quickchartButtonEl =\n",
              "            document.querySelector('#' + key + ' button');\n",
              "          quickchartButtonEl.disabled = true;  // To prevent multiple clicks.\n",
              "          quickchartButtonEl.classList.add('colab-df-spinner');\n",
              "          try {\n",
              "            const charts = await google.colab.kernel.invokeFunction(\n",
              "                'suggestCharts', [key], {});\n",
              "          } catch (error) {\n",
              "            console.error('Error during call to suggestCharts:', error);\n",
              "          }\n",
              "          quickchartButtonEl.classList.remove('colab-df-spinner');\n",
              "          quickchartButtonEl.classList.add('colab-df-quickchart-complete');\n",
              "        }\n",
              "        (() => {\n",
              "          let quickchartButtonEl =\n",
              "            document.querySelector('#df-5c6a1d34-6456-4370-92a5-d13a9508d396 button');\n",
              "          quickchartButtonEl.style.display =\n",
              "            google.colab.kernel.accessAllowed ? 'block' : 'none';\n",
              "        })();\n",
              "      </script>\n",
              "    </div>\n",
              "\n",
              "    </div>\n",
              "  </div>\n"
            ],
            "application/vnd.google.colaboratory.intrinsic+json": {
              "type": "dataframe",
              "summary": "{\n  \"name\": \"reportDatasetSummary(theData, 'columnName')\",\n  \"rows\": 20,\n  \"fields\": [\n    {\n      \"column\": \"columnName\",\n      \"properties\": {\n        \"dtype\": \"string\",\n        \"num_unique_values\": 20,\n        \"samples\": [\n          \"age\",\n          \"poutcome\",\n          \"nr.employed\"\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"numberOfNAValues\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 1735,\n        \"min\": 0,\n        \"max\": 7725,\n        \"num_unique_values\": 6,\n        \"samples\": [\n          0,\n          7725,\n          69\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"numberOfDistinctValues\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 69,\n        \"min\": 2,\n        \"max\": 314,\n        \"num_unique_values\": 12,\n        \"samples\": [\n          27,\n          3,\n          78\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"columnType\",\n      \"properties\": {\n        \"dtype\": \"category\",\n        \"num_unique_values\": 3,\n        \"samples\": [\n          \"int64\",\n          \"float64\",\n          \"object\"\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"minValue\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 1652.588952984865,\n        \"min\": -50.8,\n        \"max\": 4963.6,\n        \"num_unique_values\": 8,\n        \"samples\": [\n          1.0,\n          0.634,\n          17.0\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"maxValue\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 1721.6722889916348,\n        \"min\": -26.9,\n        \"max\": 5228.1,\n        \"num_unique_values\": 9,\n        \"samples\": [\n          999.0,\n          56.0,\n          5.045\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    }\n  ]\n}"
            }
          },
          "metadata": {},
          "execution_count": 129
        }
      ]
    },
    {
      "cell_type": "markdown",
      "source": [
        "## Report - Distinct Values"
      ],
      "metadata": {
        "id": "OHjE53nXUO8G"
      }
    },
    {
      "cell_type": "code",
      "source": [
        "reportDistinctValues(theData)"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "collapsed": true,
        "id": "ooKGz6rPOKvk",
        "outputId": "43cb6d46-2e74-4dea-c544-3090559a560a"
      },
      "execution_count": 194,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "age (int64):\n",
            "17 (4), 18 (27), 19 (37), 20 (59), 21 (97), 22 (118), 23 (214), 24 (422), 25 (538), 26 (622), 27 (770), 28 (899), 29 (1305), 30 (1544), 31 (1748), 32 (1658), 33 (1640), 34 (1581), 35 (1579), 36\n",
            "(1594), 37 (1333), 38 (1260), 39 (1303), 40 (1055), 41 (1144), 42 (1005), 43 (947), 44 (913), 45 (1010), 46 (909), 47 (828), 48 (893), 49 (760), 50 (778), 51 (679), 52 (710), 53 (667), 54 (614), 55\n",
            "(582), 56 (632), 57 (578), 58 (529), 59 (415), 60 (251), 61 (64), 62 (55), 63 (50), 64 (50), 65 (43), 66 (50), 67 (19), 68 (32), 69 (29), 70 (42), 71 (47), 72 (30), 73 (30), 74 (30), 75 (21), 76 (30),\n",
            "77 (19), 78 (24), 79 (13), 80 (30), 81 (16), 82 (17), 83 (17), 84 (7), 85 (13), 86 (7), 87 (1), 88 (20), 89 (2), 91 (2), 92 (4), 94 (1), 95 (1), 98 (2)\n",
            "\n",
            "campaign (int64):\n",
            "1 (15874), 2 (9554), 3 (4804), 4 (2378), 5 (1432), 6 (855), 7 (559), 8 (363), 9 (265), 10 (207), 11 (164), 12 (112), 13 (81), 14 (55), 15 (47), 16 (44), 17 (50), 18 (30), 19 (26), 20 (29), 21 (21), 22\n",
            "(17), 23 (13), 24 (13), 25 (7), 26 (6), 27 (10), 28 (7), 29 (10), 30 (7), 31 (7), 32 (3), 33 (4), 34 (2), 35 (5), 37 (1), 39 (1), 40 (2), 41 (1), 42 (2), 56 (1)\n",
            "\n",
            "cons.conf.idx (float64):\n",
            "-50.8 (116), -50.0 (256), -49.5 (189), -47.1 (2213), -46.2 (5171), -45.9 (8), -42.7 (6000), -42.0 (3250), -41.8 (3958), -40.8 (661), -40.4 (64), -40.3 (282), -40.0 (198), -39.8 (198), -38.3 (212),\n",
            "-37.5 (267), -36.4 (7001), -36.1 (4647), -34.8 (240), -34.6 (156), -33.6 (163), -33.0 (150), -31.4 (696), -30.1 (332), -29.8 (241), -26.9 (400)\n",
            "\n",
            "cons.price.idx (float64):\n",
            "92.201 (696), 92.379 (241), 92.431 (400), 92.469 (163), 92.649 (332), 92.713 (150), 92.756 (8), 92.843 (256), 92.893 (5171), 92.963 (661), 93.075 (2213), 93.2 (3250), 93.369 (240), 93.444 (4647),\n",
            "93.749 (156), 93.798 (64), 93.876 (198), 93.918 (6000), 93.994 (7001), 94.027 (212), 94.055 (198), 94.199 (267), 94.215 (282), 94.465 (3958), 94.601 (189), 94.767 (116)\n",
            "\n",
            "contact (object):\n",
            "cellular (23515), telephone (13554)\n",
            "\n",
            "day_of_week (object):\n",
            "thu (7742), mon (7657), wed (7347), tue (7287), fri (7036)\n",
            "\n",
            "default (object):\n",
            "no (29341), yes (3)\n",
            "\n",
            "education (object):\n",
            "university.degree (10949), high.school (8554), basic.9y (5427), professional.course (4742), basic.4y (3764), basic.6y (2082), illiterate (16)\n",
            "\n",
            "emp.var.rate (float64):\n",
            "-3.4 (973), -3.0 (150), -2.9 (1520), -1.8 (8234), -1.7 (692), -1.1 (572), -0.2 (8), -0.1 (3314), 1.1 (7001), 1.4 (14605)\n",
            "\n",
            "euribor3m (float64):\n",
            "0.634 (8), 0.635 (40), 0.636 (14), 0.637 (5), 0.638 (6), 0.639 (16), 0.64 (10), 0.642 (32), 0.643 (20), 0.644 (32), 0.645 (23), 0.646 (42), 0.649 (9), 0.65 (11), 0.651 (7), 0.652 (31), 0.653 (17),\n",
            "0.654 (18), 0.655 (31), 0.659 (14), 0.663 (10), 0.668 (17), 0.672 (12), 0.677 (11), 0.682 (37), 0.683 (14), 0.684 (16), 0.685 (8), 0.688 (3), 0.69 (3), 0.692 (10), 0.695 (9), 0.697 (20), 0.699 (27),\n",
            "0.7 (3), 0.701 (11), 0.702 (18), 0.704 (6), 0.706 (18), 0.707 (22), 0.708 (5), 0.709 (8), 0.71 (7), 0.711 (4), 0.712 (8), 0.713 (8), 0.714 (130), 0.715 (124), 0.716 (51), 0.717 (14), 0.718 (15), 0.719\n",
            "(28), 0.72 (71), 0.721 (5), 0.722 (64), 0.723 (8), 0.724 (19), 0.727 (4), 0.728 (31), 0.729 (8), 0.73 (19), 0.731 (15), 0.732 (5), 0.733 (18), 0.735 (19), 0.737 (22), 0.739 (73), 0.74 (44), 0.741\n",
            "(24), 0.742 (64), 0.743 (12), 0.744 (15), 0.748 (12), 0.749 (2), 0.75 (5), 0.752 (5), 0.753 (5), 0.754 (39), 0.755 (7), 0.761 (18), 0.762 (4), 0.766 (2), 0.767 (17), 0.768 (13), 0.77 (17), 0.771 (5),\n",
            "0.773 (19), 0.778 (6), 0.781 (20), 0.782 (10), 0.788 (20), 0.79 (11), 0.793 (7), 0.797 (34), 0.802 (7), 0.803 (30), 0.809 (19), 0.81 (18), 0.813 (6), 0.819 (19), 0.821 (20), 0.822 (9), 0.825 (26),\n",
            "0.827 (21), 0.829 (10), 0.834 (13), 0.835 (16), 0.838 (28), 0.84 (17), 0.843 (16), 0.846 (18), 0.849 (28), 0.851 (25), 0.854 (24), 0.859 (30), 0.861 (61), 0.869 (47), 0.87 (12), 0.873 (80), 0.876\n",
            "(28), 0.877 (17), 0.878 (28), 0.879 (160), 0.88 (19), 0.881 (71), 0.882 (20), 0.883 (110), 0.884 (117), 0.885 (10), 0.886 (44), 0.888 (5), 0.889 (16), 0.89 (7), 0.891 (4), 0.893 (13), 0.894 (3), 0.895\n",
            "(3), 0.896 (35), 0.898 (36), 0.899 (43), 0.9 (24), 0.903 (12), 0.904 (52), 0.905 (16), 0.908 (13), 0.914 (3), 0.921 (2), 0.927 (2), 0.933 (1), 0.937 (2), 0.942 (6), 0.944 (2), 0.953 (1), 0.956 (1),\n",
            "0.959 (14), 0.965 (5), 0.969 (1), 0.972 (17), 0.977 (20), 0.979 (3), 0.982 (15), 0.985 (5), 0.987 (17), 0.993 (3), 0.996 (1), 1.0 (18), 1.007 (3), 1.008 (5), 1.016 (8), 1.018 (3), 1.025 (14), 1.028\n",
            "(8), 1.029 (40), 1.03 (6), 1.031 (7), 1.032 (15), 1.035 (7), 1.037 (4), 1.039 (9), 1.04 (9), 1.041 (8), 1.043 (9), 1.044 (35), 1.045 (1), 1.046 (13), 1.047 (1), 1.048 (21), 1.049 (13), 1.05 (17),\n",
            "1.059 (20), 1.072 (31), 1.085 (7), 1.099 (11), 1.206 (8), 1.215 (17), 1.224 (7), 1.235 (9), 1.244 (375), 1.25 (527), 1.252 (26), 1.259 (66), 1.26 (233), 1.262 (131), 1.264 (75), 1.266 (736), 1.268\n",
            "(88), 1.27 (101), 1.281 (555), 1.286 (15), 1.291 (490), 1.299 (458), 1.313 (435), 1.327 (488), 1.334 (434), 1.344 (350), 1.354 (197), 1.365 (280), 1.372 (10), 1.384 (8), 1.392 (17), 1.4 (11), 1.405\n",
            "(1051), 1.406 (22), 1.41 (225), 1.415 (90), 1.423 (77), 1.435 (74), 1.445 (92), 1.453 (68), 1.466 (53), 1.479 (58), 1.483 (46), 1.498 (31), 1.51 (11), 1.52 (13), 1.531 (27), 1.538 (15), 1.548 (6),\n",
            "1.556 (11), 1.56 (7), 1.574 (1), 1.584 (2), 1.602 (8), 1.614 (13), 1.629 (10), 1.64 (9), 1.65 (7), 1.663 (18), 1.687 (18), 1.703 (8), 1.726 (11), 1.757 (17), 1.778 (3), 1.799 (12), 1.811 (29), 3.329\n",
            "(1), 3.428 (1), 3.488 (1), 3.563 (2), 3.669 (1), 3.743 (1), 3.816 (1), 3.853 (1), 3.879 (2), 3.901 (1), 4.021 (609), 4.076 (724), 4.12 (686), 4.153 (630), 4.191 (541), 4.223 (4), 4.245 (9), 4.286 (6),\n",
            "4.343 (5), 4.406 (7), 4.474 (3), 4.592 (4), 4.663 (8), 4.7 (8), 4.733 (2), 4.76 (3), 4.794 (5), 4.827 (5), 4.855 (745), 4.856 (1103), 4.857 (2578), 4.858 (674), 4.859 (709), 4.86 (800), 4.864 (952),\n",
            "4.865 (335), 4.866 (313), 4.912 (6), 4.918 (4), 4.921 (3), 4.936 (6), 4.947 (85), 4.955 (94), 4.956 (20), 4.957 (489), 4.958 (527), 4.959 (812), 4.96 (904), 4.961 (1728), 4.962 (2346), 4.963 (2222),\n",
            "4.964 (1058), 4.965 (965), 4.966 (549), 4.967 (570), 4.968 (895), 4.97 (151), 5.0 (7), 5.045 (7)\n",
            "\n",
            "housing (object):\n",
            "yes (19474), no (16701)\n",
            "\n",
            "job (object):\n",
            "admin. (9400), blue-collar (8329), technician (6066), services (3548), management (2648), retired (1534), entrepreneur (1308), self-employed (1274), housemaid (962), unemployed (913), student (793)\n",
            "\n",
            "loan (object):\n",
            "no (30590), yes (5585)\n",
            "\n",
            "marital (object):\n",
            "married (22456), single (10410), divorced (4134)\n",
            "\n",
            "month (object):\n",
            "may (12370), jul (6445), aug (5555), jun (4817), nov (3698), apr (2369), oct (653), sep (508), mar (496), dec (158)\n",
            "\n",
            "nr.employed (float64):\n",
            "4963.6 (572), 4991.6 (692), 5008.7 (594), 5017.5 (973), 5023.5 (150), 5076.2 (1520), 5099.1 (7640), 5176.3 (8), 5191.0 (7001), 5195.8 (3314), 5228.1 (14605)\n",
            "\n",
            "pdays (int64):\n",
            "0 (14), 1 (23), 2 (54), 3 (396), 4 (107), 5 (42), 6 (371), 7 (56), 8 (16), 9 (56), 10 (50), 11 (26), 12 (55), 13 (32), 14 (18), 15 (22), 16 (10), 17 (8), 18 (6), 19 (3), 20 (1), 21 (2), 22 (2), 25\n",
            "(1), 26 (1), 27 (1), 999 (35696)\n",
            "\n",
            "poutcome (object):\n",
            "nonexistent (31988), failure (3843), success (1238)\n",
            "\n",
            "previous (int64):\n",
            "0 (31988), 1 (4116), 2 (684), 3 (196), 4 (64), 5 (15), 6 (5), 7 (1)\n",
            "\n",
            "theTarget (int64):\n",
            "0 (32861), 1 (4208)\n",
            "\n",
            "y (object):\n",
            "no (32861), yes (4208)\n",
            "\n"
          ]
        }
      ]
    },
    {
      "cell_type": "markdown",
      "source": [
        "## Report - NA Values"
      ],
      "metadata": {
        "id": "l9EIPC6uUUrE"
      }
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "RnGBwGVZPyyh",
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 304
        },
        "collapsed": true,
        "outputId": "e5e4cfd9-950d-4a6d-9f16-3e25b1c3494f"
      },
      "source": [
        "reportNaValue(theData)"
      ],
      "execution_count": 128,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "Field\n",
              "default      7725\n",
              "education    1535\n",
              "housing       894\n",
              "loan          894\n",
              "job           294\n",
              "marital        69\n",
              "Name: Qty, dtype: int64"
            ],
            "text/html": [
              "<div>\n",
              "<style scoped>\n",
              "    .dataframe tbody tr th:only-of-type {\n",
              "        vertical-align: middle;\n",
              "    }\n",
              "\n",
              "    .dataframe tbody tr th {\n",
              "        vertical-align: top;\n",
              "    }\n",
              "\n",
              "    .dataframe thead th {\n",
              "        text-align: right;\n",
              "    }\n",
              "</style>\n",
              "<table border=\"1\" class=\"dataframe\">\n",
              "  <thead>\n",
              "    <tr style=\"text-align: right;\">\n",
              "      <th></th>\n",
              "      <th>Qty</th>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>Field</th>\n",
              "      <th></th>\n",
              "    </tr>\n",
              "  </thead>\n",
              "  <tbody>\n",
              "    <tr>\n",
              "      <th>default</th>\n",
              "      <td>7725</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>education</th>\n",
              "      <td>1535</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>housing</th>\n",
              "      <td>894</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>loan</th>\n",
              "      <td>894</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>job</th>\n",
              "      <td>294</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>marital</th>\n",
              "      <td>69</td>\n",
              "    </tr>\n",
              "  </tbody>\n",
              "</table>\n",
              "</div><br><label><b>dtype:</b> int64</label>"
            ]
          },
          "metadata": {},
          "execution_count": 128
        }
      ]
    },
    {
      "cell_type": "markdown",
      "source": [
        "## Graph All Categorical Features"
      ],
      "metadata": {
        "id": "whsHKZicXgMI"
      }
    },
    {
      "cell_type": "code",
      "source": [
        "graphCategoricalVsTarget2(theData, 'theTarget', 3)"
      ],
      "metadata": {
        "id": "V_LL4RNCXlDJ",
        "outputId": "33ff1182-2b07-4700-8f9e-3b3af0ebcfc7",
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 590
        }
      },
      "execution_count": 213,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "<pandas.core.groupby.generic.DataFrameGroupBy object at 0x7c39c92cb150>\n",
            "job\n",
            "admin.           0.131277\n",
            "blue-collar      0.068195\n",
            "entrepreneur     0.086391\n",
            "housemaid        0.099792\n",
            "management       0.114426\n",
            "retired          0.252282\n",
            "self-employed    0.107535\n",
            "services         0.082582\n",
            "student          0.313997\n",
            "technician       0.108638\n",
            "unemployed       0.146769\n",
            "Name: theTarget, dtype: float64\n",
            "<pandas.core.groupby.generic.DataFrameGroupBy object at 0x7c39c913b490>\n",
            "marital\n",
            "divorced    0.106193\n",
            "married     0.102200\n",
            "single      0.140730\n",
            "Name: theTarget, dtype: float64\n",
            "<pandas.core.groupby.generic.DataFrameGroupBy object at 0x7c39c9329e50>\n",
            "education\n",
            "basic.4y               0.102550\n",
            "basic.6y               0.081172\n",
            "basic.9y               0.077022\n",
            "high.school            0.109890\n",
            "illiterate             0.250000\n",
            "professional.course    0.113876\n",
            "university.degree      0.139008\n",
            "Name: theTarget, dtype: float64\n"
          ]
        },
        {
          "output_type": "display_data",
          "data": {
            "text/plain": [
              "<Figure size 500x400 with 0 Axes>"
            ]
          },
          "metadata": {}
        },
        {
          "output_type": "display_data",
          "data": {
            "text/plain": [
              "<Figure size 500x400 with 0 Axes>"
            ]
          },
          "metadata": {}
        },
        {
          "output_type": "display_data",
          "data": {
            "text/plain": [
              "<Figure size 500x400 with 0 Axes>"
            ]
          },
          "metadata": {}
        }
      ]
    },
    {
      "cell_type": "markdown",
      "source": [
        "# Data Wrangling - Initial"
      ],
      "metadata": {
        "id": "CNqE-p53Uf0A"
      }
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "CVSfaqgKPzE2"
      },
      "source": [],
      "execution_count": 132,
      "outputs": []
    }
  ]
}